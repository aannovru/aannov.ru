<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://tom.preston-werner.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2011-01-18T16:56:02+03:00</updated>
 <id>http://tom.preston-werner.com/</id>
 <author>
   <name>Tom Preston-Werner</name>
   <email>tom@mojombo.com</email>
 </author>

 
 <entry>
   <title>Что такое Анонимные Алкоголики (АА)?</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/18/id-00009.html"/>
   <updated>2011-01-18T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/18/id-00009</id>
   <content type="html">&lt;p&gt;Анонимные Алкоголики (АА) - это Всемирное &lt;a href=&quot;/community&quot;&gt;Содружество&lt;/a&gt;, объединяющее мужчин и женщин, которые делятся друг с другом своим опытом, силами и надеждами, чтобы решить свою общую проблему и помочь другим &lt;a href=&quot;/solution&quot;&gt;избавиться от алкоголизма&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Единственное условие для членства в АА - это желание бросить пить. Члены АА не платят ни вступительных, ни членских взносов. Мы содержим себя сами благодаря нашим добровольным пожертвованиям.&lt;/li&gt;
&lt;li&gt;АА не связано ни с какой сектой, вероисповеданием, политическим направлением, организацией или учреждением; стремится не вступать в полемику по каким бы то ни было вопросам, не поддерживает и не выступает против чьих бы то ни было интересов.&lt;/li&gt;
&lt;li&gt;Наша главная цель - оставаться трезвыми и помочь другим алкоголикам обрести здоровый, трезвый образ жизни.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Молитва о Душевном Покое</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/18/id-00008.html"/>
   <updated>2011-01-18T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/18/id-00008</id>
   <content type="html">&lt;p&gt;Боже, дай мне разум и душевный покой&lt;br /&gt;
принять то, что я не в силах изменить,&lt;br /&gt;
мужество изменить то, что могу,&lt;br /&gt;
и мудрость отличить одно от другого!&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Молитва 3-ого Шага</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/18/id-00007.html"/>
   <updated>2011-01-18T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/18/id-00007</id>
   <content type="html">&lt;p&gt;Господи, я предаю себя Тебе, чтобы создавать и творить при моём участии, как
Тебе угодно. Освободи меня от пут себялюбия, чтобы я лучше мог выполнять Твою
волю. Удали то, что тяготит меня, чтобы эта победа была свидетельством для
тех, кому я хотел помочь, полагаясь на Силу Твою, Твою Любовь и понимание
предначертанного Тобой пути. Да исполнится Воля Твоя во веки веков!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Адреса групп в Нижнем Новгороде и области</title>
   <link href="http://tom.preston-werner.com/groups.html"/>
   <updated>2011-01-18T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/groups</id>
   <content type="html">&lt;p&gt;blah&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Зарегистрированы домены для сайта Анонимных Алкоголиков Нижнего Новгорода</title>
   <link href="http://tom.preston-werner.com/news/2011/01/17/id-00006.html"/>
   <updated>2011-01-17T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/news/2011/01/17/id-00006</id>
   <content type="html">&lt;p&gt;Зарегистрированы домены для сайта Анонимных Алкоголиков Нижнего Новгорода&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Зона &quot;.ru&quot;: &lt;a href=&quot;http://aannov.ru&quot;&gt;aannov.ru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Зона &quot;.рф&quot;: &lt;a href=&quot;http://%D0%B0%D0%B0%D0%BD%D0%BD%D0%BE%D0%B2.%D1%80%D1%84&quot;&gt;ааннов.рф&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Молитва Нашей Шаговой Группы</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/16/id-00004.html"/>
   <updated>2011-01-16T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/16/id-00004</id>
   <content type="html">&lt;p&gt;Мы берёмся за руки и вместе можем сделать то,&lt;br /&gt;
Что в одиночку нам не под силу.&lt;br /&gt;
Прошло чувство отчаянья.&lt;br /&gt;
Теперь никто из нас не зависит от своей шаткой воли.&lt;br /&gt;
Теперь мы вместе стоим,&lt;br /&gt;
Протягивая руки к Силе,&lt;br /&gt;
Превышающую нашу собственную.&lt;br /&gt;
Держась за руки,&lt;br /&gt;
Мы находим любовь и понимание,&lt;br /&gt;
Которых не было и в самых прекрасных наших мечтах.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Switching to Rails. This an Example of a Post. (markdown)</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/16/id-00002.html"/>
   <updated>2011-01-16T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/16/id-00002</id>
   <content type="html">&lt;p&gt;For a while now I've been &lt;span style=&quot;text-decoration: line-through;&quot;&gt;obsessed&lt;/span&gt;
working with Ruby on Rails. Rails has caused me to switch from doing .NET/ASP.NET development
on my desktop PC using Windows XP to owning a Mac Mini and putting Ubuntu on Dell laptop.
Obviously, this is a huge change, and I'm going to explain why I've switched.&lt;/p&gt;

&lt;h3&gt;Rails is a combination of software engineering principles and web programming best practices.&lt;/h3&gt;


&lt;p&gt;One of my goals, by having this site, is to learn how to write proper english.
It's my second language, and it's specially dear to me, because most of the
things I've learned that have shapen the way I am, my work and my process,
were written in english.  It really is an awesome language to grasp the
meaning/message of text since, as a basic comparison, you can get the idea in
less words than if it were written in spanish (for example).&lt;/p&gt;

&lt;p&gt;I'm starting with
&lt;a href=&quot;http://www.economist.com/research/StyleGuide/&quot;&gt;The Economist Style Guide&lt;/a&gt;.
My first area of focus is punctuation. Major missunderstanding I have is
with the semicolon (&quot;;&quot;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.economist.com/research/styleGuide/index.cfm?page=805705&quot;&gt;Semi-colons&lt;/a&gt;
Semi-colons should be used to mark a pause longer than a comma and shorter than
a full stop. Don't overdo them.&lt;/p&gt;

&lt;p&gt;I already knew a lot about what I &lt;em&gt;didn't&lt;/em&gt; want. I was tired of complicated
blogging engines like WordPress and Mephisto. I wanted to write great posts,
not style a zillion template pages, moderate comments all day long, and
constantly lag behind the latest software release. Something like Posterous
looked attractive, but I wanted to style my blog, and it needed to be hosted
at the domain of my choosing. For the same reason, other hosted sites
(wordpress.com, blogger.com) were disqualified. There are a few people
directly using GitHub as a blog (which is very cool), but that's a bit
too much of an impedance mismatch for my tastes.&lt;/p&gt;

&lt;p&gt;In this respect Rails is a dream: Active Record. RESTful architecture.
Built-in xml/json/etc web services. TDD/BDD practices. I could go on and on, but all
that matters is &lt;strong&gt;writing Rails applications is an enjoyable&lt;/strong&gt; &lt;strong&gt;and
fun process&lt;/strong&gt;. You're not writing &lt;a href=&quot;http://www.php.net/&quot;&gt;scripts for pages&lt;/a&gt;,
not having to worry about &lt;a href=&quot;http://asp.net&quot;&gt;the nuts and bolts&lt;/a&gt; of creating a site, or &lt;a href=&quot;http://java.sun.com/products/ejb/&quot;&gt;dealing with painful XML files&lt;/a&gt;. Convention over configuration is a real path to productivity, and it's going to take the other competing systems a long time to catch up to the headway that Rails is making on a daily basis. Rails isn't the solution to everything, and &lt;a href=&quot;http://www.zeitgeist.com/wp-content/uploads/2008/06/failwhale.png&quot;&gt;it certainly has had it share of growing pains&lt;/a&gt;, but it's being proven again and again as the most efficient way to create data-driven web applications that are very reliable and follow web standards.&lt;/p&gt;

&lt;h3&gt;Tools on *nix based systems are a lot better for Rails development.&lt;/h3&gt;


&lt;p&gt;&lt;a href=&quot;http://java.sys-con.com/node/313594&quot;&gt;DHH puts it best&lt;/a&gt;:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;em&gt;The stigma of being a Web programmer still using Windows will increase.&lt;/em&gt;&lt;/p&gt;


&lt;p&gt;For me, it's not that much of a stigma, but more of a practical issue. The power of the Unix command line combined with tools like Textmate makes development on OSX and Linux machines for Rails a LOT easier. The tools on the Windows side are there, but they're usually not as powerful and not as easy to set up. Cygwin is piss slow. Most of the non-Visual Studio text editors suck. The command line sucks, and &lt;a href=&quot;http://litanyagainstfear.com/blog/2008/03/20/pimping-the-windows-command-line/&quot;&gt;I tried really hard to make it not suck&lt;/a&gt;. &lt;a href=&quot;http://blog.mmediasys.com/2008/03/06/is-windows-a-supported-platform-for-ruby-i-guess-not/&quot;&gt; Even Ruby is slower&lt;/a&gt;! All of this pain goes away on OSX/Ubuntu. Rails would be a lot different if it started on Windows, and I wonder if it would really be the same platform. For now though, I'm loving the productivity boost that I'm experencing and trying out different operating systems, and it serves my needs well.&lt;/p&gt;

&lt;h3&gt;Bleak future of .NET development.&lt;/h3&gt;


&lt;p&gt;This one will probably get me flamed the most. It's not that I don't like .NET, it's just that I couldn't see myself using it any more professionally. I'm really not a fan of VB.NET, especially compared to Ruby. It's a cruft filled language that &lt;a href=&quot;http://www.panopticoncentral.net/archive/2007/11/14/22589.aspx&quot;&gt;makes me feel like Mort when writing it.&lt;/a&gt; Great things are possible with the language, but the result is so unreadable and ugly that I don't feel it's worth it anymore to use, especially if I can choose not to. C# on the other hand I love and always will, especially over Java.&lt;/p&gt;

&lt;p&gt;What scares me more about .NET is where's it's going: Silverlight and WPF. WPF is supposed to be an awesome new platform that makes it easier for both programmers and designers to collaborate and create great applications.&lt;strong&gt; Seriously though, where are the great WPF applications? &lt;/strong&gt;Why haven't we heard as much about them, as say, the newest iPhone apps? I could say the same for Silverlight. Oh wait, the Olympics. ooh, Yahoo Messenger! Whatever. Nothing is going to kill Flash's market share.&lt;/p&gt;

&lt;p&gt;I'm sure that things have changed since I was heavy into (bleeding edge) .NET development 6-9 months ago, but still there seems to be no killer app for WPF or Silverlight yet. Until that happens they'll just suck like everything else. I'd love to be proven wrong on this point, so if you know of one please show me.&lt;/p&gt;

&lt;p&gt;If you've switched away from Windows or even if you've become a Rubyist/Pythonista in recent times, let me know what your experiences have been. For now on my blog posts will hopefully be a bit more frequent, and will chronicle various quirks and fun things I've found during my Rails journeys.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Switching to Rails. This an Example of a Post. (textile)</title>
   <link href="http://tom.preston-werner.com/solution/2011/01/16/id-00001.html"/>
   <updated>2011-01-16T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2011/01/16/id-00001</id>
   <content type="html">&lt;h3&gt;Bleak future of .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; development.&lt;/h3&gt;
&lt;p&gt;This one will probably get me flamed the most. It&amp;#8217;s not that I don&amp;#8217;t like .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, it&amp;#8217;s just that I couldn&amp;#8217;t see myself using it any more professionally. I&amp;#8217;m really not a fan of VB.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, especially compared to Ruby. It&amp;#8217;s a cruft filled language that &lt;a href=&quot;http://www.panopticoncentral.net/archive/2007/11/14/22589.aspx&quot;&gt;makes me feel like Mort when writing it.&lt;/a&gt; Great things are possible with the language, but the result is so unreadable and ugly that I don&amp;#8217;t feel it&amp;#8217;s worth it anymore to use, especially if I can choose not to. C# on the other hand I love and always will, especially over Java.&lt;/p&gt;
&lt;p&gt;What scares me more about .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; is where&amp;#8217;s it&amp;#8217;s going: Silverlight and &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt;. &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; is supposed to be an awesome new platform that makes it easier for both programmers and designers to collaborate and create great applications.&lt;strong&gt; Seriously though, where are the great &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; applications? &lt;/strong&gt;Why haven&amp;#8217;t we heard as much about them, as say, the newest iPhone apps? I could say the same for Silverlight. Oh wait, the Olympics. ooh, Yahoo Messenger! Whatever. Nothing is going to kill Flash&amp;#8217;s market share.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure that things have changed since I was heavy into (bleeding edge) .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; development 6-9 months ago, but still there seems to be no killer app for &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; or Silverlight yet. Until that happens they&amp;#8217;ll just suck like everything else. I&amp;#8217;d love to be proven wrong on this point, so if you know of one please show me.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve switched away from Windows or even if you&amp;#8217;ve become a Rubyist/Pythonista in recent times, let me know what your experiences have been. For now on my blog posts will hopefully be a bit more frequent, and will chronicle various quirks and fun things I&amp;#8217;ve found during my Rails journeys.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IronRuby drops - make some noise!</title>
   <link href="http://tom.preston-werner.com/solution/2010/04/18/ironruby-drops-make-some-noise.html"/>
   <updated>2010-04-18T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2010/04/18/ironruby-drops-make-some-noise</id>
   <content type="html">&lt;p&gt;A little context about myself and recent events:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;I used to be big into .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; before Ruby.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://litanyagainstfear.com/blog/2008/09/18/switching-to-rails/&quot;&gt;I decided to move away from .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; over 2 years ago.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;For the past 4 months I&amp;#8217;ve been using &lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt;.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; 2 for my senior capstone project.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.rubyinside.com/ironruby-1-0-released-microsoft-s-3-years-with-ruby-pay-off-3212.html&quot;&gt;IronRuby&amp;#8217;s 1.0 release has dropped!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:4000/solution/2010/04/18/ironruby-drops-make-some-noise.html#без_пробела&quot;&gt;без_пробела&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:4000/solution/2010/04/18/ironruby-drops-make-some-noise.html#с%20двумя%20пробелами&quot;&gt;с двумя пробелами!1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week &lt;a href=&quot;http://blog.scottbellware.com/2010/04/ironruby-drops-does-it-make-sound.html&quot;&gt;Scott Bellware wrote&lt;/a&gt; about why this should matter to anyone doing .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, especially the &amp;#8216;forward thinking&amp;#8217; &lt;a href=&quot;http://altdotnet.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ALT&lt;/span&gt;.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;&lt;/a&gt; crowd. I&amp;#8217;m not too familiar with the history of the &lt;span class=&quot;caps&quot;&gt;ALT&lt;/span&gt;.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; movement, but I love following smart developers in any sector of our industry on Twitter and I&amp;#8217;ve been watching more .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; devs lately because of my senior project.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s Scott&amp;#8217;s main points as I saw it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Comparsions of Rails to &lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt;.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; 2 are difficult (I agree!)&lt;/li&gt;
	&lt;li&gt;Getting the average .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; developer out of the Visual Studio comfort zone is still unlikely&lt;/li&gt;
	&lt;li&gt;You can now painlessly use Ruby and Rails with &lt;span class=&quot;caps&quot;&gt;IIS&lt;/span&gt; and .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; in general&lt;/li&gt;
	&lt;li&gt;Stop using .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; ports of Ruby projects, you can just run them with IronRuby now!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reading it and seeing &lt;a href=&quot;http://twitter.com/armmer&quot;&gt;Jason Meridth&amp;#8217;s&lt;/a&gt; tweet&amp;#8230;&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://twictur.es/i/12367649265.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230;I had to give a Rubyist response. My reaction is: &lt;strong&gt;Welcome!&lt;/strong&gt; I don&amp;#8217;t think fear has anything to do with it, it&amp;#8217;s just hard to break out of the norm for any of us. I&amp;#8217;m positive you&amp;#8217;ll have fun learning Ruby and integrating with your existing .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; infrastructure.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m right behind Scott in that the barrier to entry for those on Windows and in the .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; ecosystem has been lowered immensely. Plenty have said it before, but now is the time to start. Many of us have converted over from C#/VB.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, and I can&amp;#8217;t be the only one who&amp;#8217;s happy to share their experience with those considering diving into Ruby.&lt;/p&gt;
&lt;p&gt;Let me start you off right now:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://guides.rails.info/&quot;&gt;Rails Guides, a daily reference and great starter manual&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://railscasts.com/&quot;&gt;Railscasts, tons of great recipes in video form&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.railstutorial.org/&quot;&gt;Rails Tutorial, a book in progress&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sinatrarb.com/intro.html&quot;&gt;Intro to Sinatra, the classiest web framework around&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;без_пробела&quot; class=&quot;tag&quot;&gt;без_пробела !11&lt;/h2&gt;
&lt;h2 id=&quot;с двумя пробелами&quot; class=&quot;tag&quot;&gt;с двумя пробелами !11&lt;/h2&gt;
&lt;p&gt;IronRuby has dropped, but you have to make the noise. We Rubyists are waiting to hear from you!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Rails Module (in Rails 3)</title>
   <link href="http://tom.preston-werner.com/solution/2010/02/03/the-rails-module.html"/>
   <updated>2010-02-03T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2010/02/03/the-rails-module</id>
   <content type="html">&lt;p&gt;So, you may have noticed this in the &lt;a href=&quot;http://guides.rails.info/3_0_release_notes.html&quot;&gt;Rails 3 Changelog&lt;/a&gt;&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Railties now deprecates:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RAILS_ROOT&lt;/code&gt; in favour of &lt;code&gt;Rails.root&lt;/code&gt;,&lt;br /&gt;
&lt;code&gt;RAILS_ENV&lt;/code&gt; in favour of &lt;code&gt;Rails.env&lt;/code&gt;, and&lt;br /&gt;
&lt;code&gt;RAILS_DEFAULT_LOGGER&lt;/code&gt; in favour of &lt;code&gt;Rails.logger&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great&amp;#8230;but why? Better alternatives have existed for a while in Rails core (some since 2.1.0), and it&amp;#8217;s about damn time you start using them properly. There&amp;#8217;s also some other helpful methods on the &lt;code&gt;Rails&lt;/code&gt; module we&amp;#8217;ll explore in this post.&lt;/p&gt;
&lt;h2&gt;Rails.root&lt;/h2&gt;
&lt;p&gt;This is a big one. Every Rails developer has done &lt;code&gt;File.join(RAILS_ROOT, &quot;path&quot;, &quot;to&quot;, &quot;something&quot;)&lt;/code&gt; before. Stop that. And don&amp;#8217;t just replace &lt;code&gt;RAILS_ROOT&lt;/code&gt; with &lt;code&gt;Rails.root&lt;/code&gt; either. &lt;code&gt;Rails.root&lt;/code&gt; is a &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/pathname/rdoc/index.html&quot;&gt;Pathname&lt;/a&gt;, which means you can do cool stuff like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.root
=&amp;gt; #&amp;lt;Pathname:/Users/qrush/Dev/ruby/new_app&amp;gt;

&amp;gt;&amp;gt; Rails.root.join(&quot;config&quot;, &quot;database.yml&quot;)
=&amp;gt; #&amp;lt;Pathname:/Users/qrush/Dev/ruby/new_app/config/database.yml&amp;gt;

&amp;gt;&amp;gt; _.read
=&amp;gt; &quot;development:\n ...
&lt;/pre&gt;&lt;p&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Rails.env&lt;/h2&gt;
&lt;p&gt;Same deal, you&amp;#8217;ve probably done something like &lt;code&gt;if RAILS_ENV == &quot;production&quot;&lt;/code&gt; in your Rails apps. Stop that too. Oh, you thought this would just be a &lt;code&gt;String&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.env
=&amp;gt; &quot;development&quot;

&amp;gt;&amp;gt; Rails.env.class
=&amp;gt; ActiveSupport::StringInquirer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hulu.com/watch/124915/family-guy-back-to-jail#s-p1-sr-i1&quot;&gt;Whaaaat?&lt;/a&gt; Actually, this is a really neat utility. From &lt;code&gt;activesupport/lib/active_support/string_inquirer.rb&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;Awesome. This lets us do stuff like this in &lt;a href=&quot;http://github.com/qrush/gemcutter&quot;&gt;Gemcutter&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;h2&gt;Rails.logger&lt;/h2&gt;
&lt;p&gt;This is your favorite &lt;code&gt;Logger&lt;/code&gt; class, just now without an annoying constant name of &lt;code&gt;RAILS_DEFAULT_LOGGER&lt;/code&gt;. Much easier to remember.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.logger
=&amp;gt; #&amp;lt;ActiveSupport::BufferedLogger:0x21de384 ...

&amp;gt;&amp;gt; Rails.logger.info &quot;zomg!&quot;
=&amp;gt; &quot;zomg!\n&quot;

&amp;gt;&amp;gt; File.read(&quot;log/development.log&quot;)
=&amp;gt; &quot;zomg!\n&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rails.public_path&lt;/h2&gt;
&lt;p&gt;A helpful shortcut to what your &lt;code&gt;public&lt;/code&gt; assets directory is called, probably to use with &lt;code&gt;Rails.root&lt;/code&gt;. (Why this isn&amp;#8217;t a &lt;code&gt;Pathname&lt;/code&gt; is beyond me, sounds like a good patch to whip up!)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.public_path
=&amp;gt; &quot;public&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rails.cache&lt;/h2&gt;
&lt;p&gt;Now the rabbit hole goes deeper. This is a unified interface to memory/file/you name it caching stores that can be used with Rails. If you&amp;#8217;ve ever made some sort of caching global variable, like &lt;code&gt;$memcache&lt;/code&gt; or &lt;code&gt;CACHE&lt;/code&gt;, you should &lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;read up here.&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.cache
=&amp;gt; #&amp;lt;ActiveSupport::Cache::MemoryStore:0x21e04b8 @data={}&amp;gt;

&amp;gt;&amp;gt; Rails.cache.write(&quot;rush&quot;, &quot;limelight&quot;)
=&amp;gt; &quot;limelight&quot;

&amp;gt;&amp;gt; Rails.cache.read(&quot;rush&quot;)
=&amp;gt; &quot;limelight&quot;

&amp;gt;&amp;gt; Rails.cache
=&amp;gt; #&amp;lt;ActiveSupport::Cache::MemoryStore:0x21e04b8
     @data={&quot;rush&quot;=&amp;gt;&quot;limelight&quot;}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rails.application&lt;/h2&gt;
&lt;p&gt;The new &lt;code&gt;Rails::Application&lt;/code&gt; class encapsulates &lt;strong&gt;a lot&lt;/strong&gt; of what was thrown around in Railties in previous releases of Rails, and really represents the ultimate embracing of Rack&amp;#8217;s modularity. &lt;a href=&quot;http://www.engineyard.com/blog/2010/rails-and-merb-merge-rails-core-part-4-of-6/&quot;&gt;Yehuda&amp;#8217;s post&lt;/a&gt; can explain it further, but the important thing is now you can run multiple &lt;code&gt;Rails::Application&lt;/code&gt;s in the same process if you need to, and it&amp;#8217;s promoting decoupling even further by starting from the inside of the framework. Awesome.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.application
=&amp;gt; #&amp;lt;NewApp::Application:0x13896b0 ...

&amp;gt;&amp;gt; Rails.application.routes
=&amp;gt; #&amp;lt;ActionDispatch::Routing::RouteSet:0x162877c ...

&amp;gt;&amp;gt; Rails.application.routes.recognize_path(&quot;rails/info/properties&quot;)
=&amp;gt; {:controller=&amp;gt;&quot;rails/info&quot;, :action=&amp;gt;&quot;properties&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rails.configuration&lt;/h2&gt;
&lt;p&gt;This gives you global access to all of the configuration data set up in your &lt;code&gt;config/application.rb&lt;/code&gt; and various &lt;code&gt;config/environments/#{Rails.env}.rb&lt;/code&gt; files, if you should ever need it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails console
&amp;gt;&amp;gt; Rails.configuration
=&amp;gt; #&amp;lt;Rails::Application::Configuration:0x7e1ab0 ...

&amp;gt;&amp;gt; pp Rails.configuration.middleware
[ActionDispatch::Static,
 Rack::Lock,
 Rack::Runtime,
 Rails::Rack::Logger,
 ActionDispatch::ShowExceptions,
 ActionDispatch::Callbacks,
 ActionDispatch::Cookies,
 ActionDispatch::Session::CookieStore,
 ActionDispatch::Flash,
 ActionDispatch::Cascade,
 ActionDispatch::ParamsParser,
 Rack::MethodOverride,
 ActionDispatch::Head,
 ActiveRecord::ConnectionAdapters::ConnectionManagement,
 ActiveRecord::QueryCache]
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m sure some are missing here (like &lt;code&gt;Rails.version&lt;/code&gt;), but these are the ones that I think matter most to Rails developers. If something else should be covered here, let me know!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Load Rails conditionally with Rack</title>
   <link href="http://tom.preston-werner.com/solution/2009/11/10/load-rails-conditionally-with-rack.html"/>
   <updated>2009-11-10T00:00:00+03:00</updated>
   <id>http://tom.preston-werner.com/solution/2009/11/10/load-rails-conditionally-with-rack</id>
   <content type="html">&lt;p&gt;One of the great things about &lt;a href=&quot;http://gemcutter.org&quot;&gt;Gemcutter&lt;/a&gt; is that it&amp;#8217;s using &lt;a href=&quot;http://www.sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt; via &lt;a href=&quot;http://guides.rubyonrails.org/rails_on_rack.html&quot;&gt;Rails Metal&lt;/a&gt; to serve up the gems. Recently, I had to run some long migrations (~10 minutes) and I&amp;#8217;m sure we&amp;#8217;ll have some more in the future. Since the gem server is decoupled from the Rails app, some clever Rack loading now allows us to continue to serve gems even when we&amp;#8217;re down for maintenance.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;config.ru&lt;/code&gt; now looks like this:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;So now, Heroku treats Gemcutter as a Rack app, and not a pure Rails app. Normally, it&amp;#8217;ll just use Thin and boot up Rails as normal with &lt;code&gt;Rack::Adapter::Rails&lt;/code&gt;. &lt;code&gt;script/server&lt;/code&gt; still works as normal, too, but I&amp;#8217;ll probably use &lt;a href=&quot;http://github.com/rtomayko/shotgun&quot;&gt;shotgun&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;The fun begins when you run &lt;code&gt;MAINTENANCE_MODE=on rackup&lt;/code&gt;. The following happens from there:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Load up the &lt;a href=&quot;http://litanyagainstfear.com/blog/2009/10/14/gem-bundler-is-the-future/&quot;&gt;Bundler&lt;/a&gt; environment that has all of our gems, and some of Rails&amp;#8217; magic.&lt;/li&gt;
	&lt;li&gt;Fire up &lt;a href=&quot;http://rack.rubyforge.org/doc/classes/Rack/Static.html&quot;&gt;Rack::Static&lt;/a&gt; to serve static assets like the images and &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; to make the site look nice&lt;/li&gt;
	&lt;li&gt;Use the &lt;a href=&quot;http://github.com/qrush/gemcutter/blob/master/app/metal/hostess.rb&quot;&gt;Hostess&lt;/a&gt;, Gemcutter&amp;#8217;s Sinatra gem server to continue to serve gems&lt;/li&gt;
	&lt;li&gt;All other requests are then caught by David Dollar&amp;#8217;s &lt;a href=&quot;http://github.com/ddollar/rack-maintenance&quot;&gt;rack-maintenance&lt;/a&gt; that simply serves up a static &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; page.&lt;/li&gt;
	&lt;li&gt;Use &lt;code&gt;Sinatra::Application&lt;/code&gt; since we need some sort of endpoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And boom, we have a read-only site that continues to serve gems. Rack rules.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://6.media.tumblr.com/tumblr_kobz0jtHsN1qzln4lo1_400.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>On Gem Forking</title>
   <link href="http://tom.preston-werner.com/solution/2009/10/09/on-gem-forking.html"/>
   <updated>2009-10-09T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2009/10/09/on-gem-forking</id>
   <content type="html">&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;http://cloud.github.com/downloads/qrush/litanyagainstfear/fork2.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So, &lt;a href=&quot;http://github.com/blog/515-gem-building-is-defunct&quot;&gt;GitHub has recommended Gemcutter&lt;/a&gt; as an alternative to hosting gems on GitHub. Of course, there seems to be an outcry, for three main reasons that I can see:&lt;/p&gt;
&lt;p&gt;1) Effort must be made to move documentation and install instructions&lt;br /&gt;
2) Gem forking is not possible with the new site&lt;br /&gt;
3) GitHub gave no warning on this&lt;/p&gt;
&lt;p&gt;As for #1, you&amp;#8217;ve got a year to update your user base and get gems off GitHub. I&amp;#8217;d assume that any actively maintained project has figured Gemcutter out by then. And for #3, at least we&amp;#8217;ve got a new service that works and can meet the same needs.&lt;/p&gt;
&lt;p&gt;Regarding RubyGem forking, I&amp;#8217;d like to state that this statement is &lt;strong&gt;false&lt;/strong&gt;. Gemcutter accepts built gems, so you simply need to mimic the actions that GitHub&amp;#8217;s gem builder did: Open your .gemspec up, append your username to the gem name, and save. &lt;code&gt;gem build&lt;/code&gt;, &lt;code&gt;gem push&lt;/code&gt;, and done.&lt;/p&gt;
&lt;p&gt;I think an important distinction must be made here: &lt;strong&gt;gem forking != scm forking&lt;/strong&gt;. GitHub made it easy for anyone to automatically push modifications to gems, but there&amp;#8217;s a bigger picture to think of here. Hopefully at some point, the changes you made will be brought back into the mainline gem. As &lt;a href=&quot;http://daviddollar.org/&quot;&gt;David Dollar&lt;/a&gt; so eloquently puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think the general idea is that gem forks should be a huge special case. I&amp;#8217;m somewhat of the mind personally that making gem forks too &amp;#8216;easy&amp;#8217; causes a great deal of unnecessary fragmentation in the community. It seems reasonable to me, that if your project is going to depend on a gem fork, that the dependency resolution not be automatic, and your installation instructions can tell the user how to get the forked dependency.&lt;/p&gt;
&lt;p&gt;If a fork is going to be long-term, or a true alternative, it should probably be reregistered under a new name as a different project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like I stated above, &amp;#8216;gem forking&amp;#8217; is still supported just because of the nature of how Gemcutter works. I felt there needed to be a longer term solution for this in general, since now the community has grown used to it. This &lt;a href=&quot;http://wiki.github.com/qrush/gemcutter/fork-support&quot;&gt;lively discussion&lt;/a&gt; ensued, and after some deliberation we&amp;#8217;re going to use subdomains in order to solve the problem.&lt;/p&gt;
&lt;p&gt;The idea is this: you&amp;#8217;ll be able to register your own subdomain on gemcutter.org, such as &lt;code&gt;qrush.gemcutter.org&lt;/code&gt;, and we&amp;#8217;ll give you a completely blank index to push to. Hopefully you&amp;#8217;ll be able to add others like the &lt;a href=&quot;http://gemcutter.org/pages/gem_docs#owner&quot;&gt;gem owner&lt;/a&gt; system works now. I feel this feature needs to be used in the following ways:&lt;/p&gt;
&lt;p&gt;1) Subdomain use should be infrequent. It&amp;#8217;s for trial/forked gems that shouldn&amp;#8217;t be relied on for production.&lt;br /&gt;
2) Use prerelease versions for development snapshots (version numbers like 1.0.0pre, &lt;code&gt;gem install yourgem --prerelease&lt;/code&gt;)&lt;br /&gt;
3) Don&amp;#8217;t add someone&amp;#8217;s subdomain as a source, unless you can completely trust anything they toss there. (like, your own for example)&lt;br /&gt;
4) Consider gemcutter.org/rubygems.org as the main, canonical repo that you can trust.&lt;br /&gt;
5) Start looking into &lt;a href=&quot;http://blog.segment7.net/articles/2009/02/04/a-rubygems-github-proposal&quot;&gt;gem signing/cert&lt;/a&gt; since it&amp;#8217;s &lt;strong&gt;the&lt;/strong&gt; way we can really trust gems&lt;/p&gt;
&lt;p&gt;Of course, none of this subdomains stuff works yet, but it seems like the best way forward. It&amp;#8217;s also spawning new, awesome ideas like &lt;a href=&quot;http://github.com/qrush/gemcutter/issues#issue/91&quot;&gt;password protected, private subdomains&lt;/a&gt;. If you&amp;#8217;re interested in contributing to the project, please &lt;a href=&quot;http://github.com/qrush/gemcutter&quot;&gt;fork away&lt;/a&gt; or hop in #gemcutter on Freenode to see what&amp;#8217;s happening.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;our&lt;/strong&gt; gem host now, let&amp;#8217;s make it awesome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>RailsCamp NE Adventures</title>
   <link href="http://tom.preston-werner.com/solution/2009/07/20/railscamp-ne-adventures.html"/>
   <updated>2009-07-20T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2009/07/20/railscamp-ne-adventures</id>
   <content type="html">&lt;p&gt;The concept is simple: Get a bunch of developers together for a weekend away from the internet and most of civilization to have fun and relax. To be honest, I didn&amp;#8217;t get to relax much, but it was made up in spades just by how awesome the event was.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://railscamps.com&quot;&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img style=&quot;padding:5px; background: #fff&quot; src=&quot;http://railscamps.com/images/yield.png&quot; /&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The venue was the &lt;a href=&quot;http://www.themainehouses.com/mountain_house/mountain_house.php&quot;&gt;Maine MountainView House&lt;/a&gt; in &lt;a href=&quot;http://maps.google.com/maps?q=bryant+pond,+me&amp;amp;oe=utf-8&amp;amp;rls=com.ubuntu:en-US:unofficial&amp;amp;client=firefox-a&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;split=0&amp;amp;gl=us&amp;amp;ei=42BkSrOdNYXeNbClrPcB&amp;amp;sa=X&amp;amp;oi=geocode_result&amp;amp;ct=title&amp;amp;resnum=1&quot;&gt;Bryant Pond, ME&lt;/a&gt; I&amp;#8217;m sure others will post better pictures soon, but the pond itself was beautiful. A dock, fire pit, and plenty of chairs made for some fun smore-making and &lt;a href=&quot;http://en.wikipedia.org/wiki/Mafia_(party_game)&quot;&gt;werewolf&lt;/a&gt; games. The house was huge and definitely stood up to nearly 30 developers&amp;#8217; antics throughout the weekend.&lt;/p&gt;
&lt;p&gt;The event itself was slightly organized, which was just perfect: catered lunch and dinner, and plenty of social hacking. Each day had a few talks showing off fun projects and interesting problems. Topics included covered &lt;a href=&quot;http://www.yotabanana.com/hiki/ruby-gettext-howto-rails.html&quot;&gt;internationalization with gettext&lt;/a&gt;, &lt;a href=&quot;http://couchdb.apache.org&quot;&gt;CouchDB&lt;/a&gt;, the &lt;a href=&quot;http://railsrumble.com&quot;&gt;Rails Rumble&lt;/a&gt;, &lt;a href=&quot;http://rdoc.info&quot;&gt;rdoc.info&lt;/a&gt;, &lt;a href=&quot;http://radiantcms.org&quot;&gt;RadiantCMS&lt;/a&gt;, and plenty more I&amp;#8217;m probably missing. &lt;a href=&quot;http://img39.yfrog.com/i/kaed.jpg/&quot;&gt;I showed off&lt;/a&gt; &lt;a href=&quot;http://gemcutter.org&quot;&gt;Gemcutter&lt;/a&gt; and got plenty of awesome feedback and ideas for the site.&lt;/p&gt;
&lt;p&gt;As for hacking, it was an interesting mix of people and skill levels. Quite a few developers were there mostly to observe what others were using for tools and to understand how they work. I loved showing off Cucumber and I definitely heard the good word of &lt;a href=&quot;http://rubyhoedown2008.confreaks.com/05-bryan-liles-lightning-talk-tatft-test-all-the-f-in-time.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;TATFT&lt;/span&gt;&lt;/a&gt; being preached. I wish I could have watched a little more, but I was having too much fun coding away.&lt;/p&gt;
&lt;p&gt;My adventure went something like this: The start of Saturday got a few people talking about ideas to hack on, and perhaps a project the group could work on together. &lt;a href=&quot;http://zerosum.org&quot;&gt;Nick Plante&lt;/a&gt; mentioned games via Twitter, and that eventually lead to implementing &lt;a href=&quot;http://en.wikipedia.org/wiki/Dope_Wars&quot;&gt;DopeWars&lt;/a&gt;. From there, some went outside on the porch to sketch out how the app would work, and we then wrote some basic user stories. It ended up that &lt;a href=&quot;http://jayunit.net&quot;&gt;Jason&lt;/a&gt; and I banged out a quick prototype in Sinatra and got something decently working. On Sunday, amongst recovering from some late night &lt;a href=&quot;http://www.urbanterror.net/news.php&quot;&gt;Urban Terror&lt;/a&gt;, I hacked with some others on searching gems via Gemcutter&amp;#8217;s web interface.&lt;/p&gt;
&lt;p&gt;If there&amp;#8217;s a &lt;a href=&quot;http://railscamps.com&quot;&gt;RailsCamp&lt;/a&gt; going on even remotely close to you, do everything you can to get there. It was more hands on than RailsConf, and the amount of networking and fun being had was multiplied. I&amp;#8217;d just like to say thanks to the organizers, &lt;a href=&quot;http://freelancing-god.com&quot;&gt;Pat Allan&lt;/a&gt; and &lt;a href=&quot;http://cardarella.blogspot.com/&quot;&gt;Brian Cardarella&lt;/a&gt;, for working hard to put on a great time for all. I&amp;#8217;d love to help organize a RailsCamp in the future, perhaps since I&amp;#8217;m returning to Rochester soon it could include the Great Lakes region and bring in hackers from NY, PA, OH, MI, and more. (If you&amp;#8217;re interested too, leave a comment!)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Where do you get Ruby news from?</title>
   <link href="http://tom.preston-werner.com/solution/2008/10/19/where-do-you-get-ruby-news-from.html"/>
   <updated>2008-10-19T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2008/10/19/where-do-you-get-ruby-news-from</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m wondering where other fellow Ruby and Rails hackers get their Ruby-related news fix from. For some reason I just feel continually disconnected from the community at large and I just want to make sure I&amp;#8217;m taking advantage of the resources out there. So here&amp;#8217;s my news sources:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Ruby.Reddit (&lt;a href=&quot;http://reddit.com/r/ruby&quot;&gt;http://reddit.com/r/ruby&lt;/a&gt;): This seems to be one of the most active sources, and usually the commentors are fantastic. It&amp;#8217;s community-driven news at its best, but sometimes it&amp;#8217;s a little slow compared to the other subreddits. What I like most about it is that the community is relatively small, so if you post a story it usually sticks on the page for a few days.&lt;/li&gt;
	&lt;li&gt;RubyFlow (&lt;a href=&quot;http://rubyflow.com&quot;&gt;http://rubyflow.com&lt;/a&gt;): I just got into RubyFlow recently, and it seems more like the community well than anything. You can throw a coin in and wish for some visitors to your blog, but you&amp;#8217;re usually lost in the mix. It&amp;#8217;s a very interesting concept though, and it&amp;#8217;s definitely fun to see big names in the Ruby community on the list.&lt;/li&gt;
	&lt;li&gt;Ruby.Alltop (&lt;a href=&quot;http://ruby.alltop.com&quot;&gt;http://ruby.alltop.com&lt;/a&gt;): Alltop is awesome for getting an overall sense of where the community is right now. It&amp;#8217;s Guy Kawasaki&amp;#8217;s &amp;#8216;magazine rack&amp;#8217; of latest Ruby stories&amp;#8230;essentially a &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; aggregator. I&amp;#8217;ve discovered quite a few blogs I didn&amp;#8217;t know about and now keep track of through it. One of my goals with this blog is to get on there someday! :)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I suppose my secondary news sources would be Freenode&amp;#8217;s various Ruby channels (mostly #rubyonrails) and the Rails mailing list, but I don&amp;#8217;t check those as often. I&amp;#8217;ve also heard about a &lt;a href=&quot;http://caboo.se&quot;&gt;secret channel&lt;/a&gt;, but who knows if I&amp;#8217;ll ever get in there. Those also don&amp;#8217;t have a handy &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed, so I tend not to check them as often. So, where do you get news about the Ruby community from?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Calculating Age in Rails</title>
   <link href="http://tom.preston-werner.com/solution/2008/10/13/calculating-age-in-rails.html"/>
   <updated>2008-10-13T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2008/10/13/calculating-age-in-rails</id>
   <content type="html">&lt;p&gt;You&amp;#8217;d think that this would be easy, but for some reason it wasn&amp;#8217;t, at least for me. Let&amp;#8217;s say you keep track of a User&amp;#8217;s birthday with a date field. Great! Let&amp;#8217;s show the user&amp;#8217;s age.&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;Done! Right? &lt;span class=&quot;caps&quot;&gt;WRONG&lt;/span&gt;. Worked fine for some users, until one of my coworkers asked me&amp;#8230;hey, you&amp;#8217;re not 21 yet&amp;#8230;how&amp;#8217;d you magically gain a year on your profile? Crap. Obviously this will work for everyone&amp;#8217;s whose birthday is &lt;span class=&quot;caps&quot;&gt;BEFORE&lt;/span&gt; &lt;code&gt;Date.today&lt;/code&gt;, but not after.&lt;/p&gt;
&lt;p&gt;So, we need a more exact method of calculating the age:&lt;br /&gt;
Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;So what this method does instead is use the &lt;code&gt;Rational&lt;/code&gt; value given by subtracting two &lt;code&gt;Date&lt;/code&gt;s, and divides it by the number of days in a year. Since that number is still a &lt;code&gt;Rational&lt;/code&gt;, calling &lt;code&gt;floor&lt;/code&gt; on it will round it down to the nearest &lt;code&gt;Fixnum&lt;/code&gt;, giving us a (slightly more) precise account of this user&amp;#8217;s age. &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;EDIT&lt;/span&gt;: But this is still inaccurate!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, I thought it was easy too. Perhaps this shows that I need to test my app a little more thoroughly! It also would be nice to save the age in an instance level variable, but right now I don&amp;#8217;t use the age more than once on a page so it doesn&amp;#8217;t matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;EDIT&lt;/span&gt;&lt;/strong&gt;: It looks like my method is still not sufficient for leap years! The comments have posted &lt;span class=&quot;caps&quot;&gt;MANY&lt;/span&gt; great solutions. My method is fine for a general estimation, but the comments have many solutions for that deal with greater accuracy. I&amp;#8217;m honestly not sure which is best, so choose carefully when you&amp;#8217;re developing your app.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Loading custom code in Rails</title>
   <link href="http://tom.preston-werner.com/solution/2008/09/22/loading-custom-code-in-rails.html"/>
   <updated>2008-09-22T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2008/09/22/loading-custom-code-in-rails</id>
   <content type="html">&lt;p&gt;This is a question I&amp;#8217;ve seen asked (including by myself) in #rubyonrails on Freenode quite a few times, and I figured I&amp;#8217;d settle it once and for all. There&amp;#8217;s a few different ways to get custom code loaded into your Rails app. The first solution to this is understanding how code gets loaded with Ruby in the first place, which I usually get confused with. Let&amp;#8217;s do a little recap about your different options that Ruby and Rails provides:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ruby-doc.org/core/classes/Kernel.html#M005966&quot;&gt;load&lt;/a&gt;: &lt;/strong&gt;Loads and executes the Ruby program in the file &lt;em&gt;filename&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ruby-doc.org/core/classes/Kernel.html#M005967&quot;&gt;require&lt;/a&gt;: &lt;/strong&gt;Ruby tries to load the library&lt;em&gt;&lt;/em&gt;, returning &lt;tt&gt;true&lt;/tt&gt; if successful.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://wiki.rubyonrails.org/rails/pages/RequireDependency&quot;&gt;require_dependency&lt;/a&gt;: &lt;/strong&gt;Reloads source files on each request when in development mode, so changes are reflected on the next request.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;require_or_load: &lt;/strong&gt;There doesn&amp;#8217;t seem to be much documentation on this, but it doesn&amp;#8217;t seem as safe and &lt;a href=&quot;http://github.com/rails/rails/tree/master/activesupport/CHANGELOG#L1123&quot;&gt;it may result in your code being loaded twice&lt;/a&gt;. Review the code &lt;a href=&quot;http://github.com/rails/rails/tree/master/activesupport/lib/active_support/dependencies.rb#L228-264&quot;&gt;here&lt;/a&gt; before you use it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the most ideal keyword to use is &lt;strong&gt;require_dependency&lt;/strong&gt;, since it will reload code during development mode when you make changes. Otherwise, you&amp;#8217;ll have to constantly restart your development server/console, and that just sucks. Plus, it&amp;#8217;ll work perfectly in production mode and only load the files once.&lt;/p&gt;
&lt;p&gt;So, where&amp;#8217;s the best place to put the files with your custom code? Well, there&amp;#8217;s a few folders that are on the Rails load path in the first place: &lt;strong&gt;app, lib, vendor and mock&lt;/strong&gt; &lt;strong&gt;paths&lt;/strong&gt; (&lt;a href=&quot;http://github.com/rails/rails/tree/master/railties/lib/initializer.rb#L607-609&quot;&gt;source&lt;/a&gt;) you need to add different folders to the load path, that&amp;#8217;s more than possible. In your config/environment.rb, add whatever folder you want in the config.load_paths variable. For instance,&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;This will load the custom directory (RAILS_ROOT/custom) to the load path so you can use those files. The problem with files you put in these directories is that they may be in the load path, but you&amp;#8217;ll have to require the custom files you want in each class that you&amp;#8217;ll want to use them. The solution to this is to get the file required for the entire Rails environment, which is a lot easier than you&amp;#8217;d think.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say we want to load some extensions to String for your app. Being a forward thinking developer, you&amp;#8217;ve created a new folder in lib, called core_ext, where you can put other ruby files in the future if you need to. So in lib/core_ext/string.rb you&amp;#8217;ve dumped for example:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;The folder config/initializers contains files that run once when your Rails environment is getting set up. Create a new file in that folder and this will run through your custom folder and make sure that the files are required properly.&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;So now, you can call &lt;code&gt;require_core_ext&lt;/code&gt; in whatever class you want, and it will reload all of your custom code if you&amp;#8217;re in development mode or if you&amp;#8217;re in production, it will only load your custom classes when the file is first loaded. Now you can call &lt;code&gt;String#slugify&lt;/code&gt; all you want, and if you make changes to the method in lib/core_ext it will be reflected when you refresh the page.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve got any other examples of how you bring in custom code, let me know, as I&amp;#8217;d love to find out.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Switching to Rails</title>
   <link href="http://tom.preston-werner.com/solution/2008/09/18/switching-to-rails.html"/>
   <updated>2008-09-18T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/solution/2008/09/18/switching-to-rails</id>
   <content type="html">&lt;p&gt;For a while now I&amp;#8217;ve been &lt;span style=&quot;text-decoration: line-through;&quot;&gt;obsessed&lt;/span&gt; working with Ruby on Rails. Rails has caused me to switch from doing .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt;.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; development on my desktop PC using Windows XP to owning a Mac Mini and putting Ubuntu on Dell laptop. Obviously, this is a huge change, and I&amp;#8217;m going to explain why I&amp;#8217;ve switched.&lt;/p&gt;
&lt;h3&gt;Rails is a combination of software engineering principles and web programming best practices.&lt;/h3&gt;
&lt;p&gt;In this respect Rails is a dream: Active Record. RESTful architecture. Built-in xml/json/etc web services. &lt;span class=&quot;caps&quot;&gt;TDD&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; practices. I could go on and on, but all that matters is &lt;strong&gt;writing Rails applications is an enjoyable&lt;/strong&gt; &lt;strong&gt;and fun process&lt;/strong&gt;. You&amp;#8217;re not writing &lt;a href=&quot;http://www.php.net/&quot;&gt;scripts for pages&lt;/a&gt;, not having to worry about &lt;a href=&quot;http://asp.net&quot;&gt;the nuts and bolts&lt;/a&gt; of creating a site, or &lt;a href=&quot;http://java.sun.com/products/ejb/&quot;&gt;dealing with painful &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; files&lt;/a&gt;. Convention over configuration is a real path to productivity, and it&amp;#8217;s going to take the other competing systems a long time to catch up to the headway that Rails is making on a daily basis. Rails isn&amp;#8217;t the solution to everything, and &lt;a href=&quot;http://www.zeitgeist.com/wp-content/uploads/2008/06/failwhale.png&quot;&gt;it certainly has had it share of growing pains&lt;/a&gt;, but it&amp;#8217;s being proven again and again as the most efficient way to create data-driven web applications that are very reliable and follow web standards.&lt;/p&gt;
&lt;h3&gt;Tools on *nix based systems are a lot better for Rails development.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://java.sys-con.com/node/313594&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DHH&lt;/span&gt; puts it best&lt;/a&gt;:&lt;br /&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;em&gt;The stigma of being a Web programmer still using Windows will increase.&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;For me, it&amp;#8217;s not that much of a stigma, but more of a practical issue. The power of the Unix command line combined with tools like Textmate makes development on &lt;span class=&quot;caps&quot;&gt;OSX&lt;/span&gt; and Linux machines for Rails a &lt;span class=&quot;caps&quot;&gt;LOT&lt;/span&gt; easier. The tools on the Windows side are there, but they&amp;#8217;re usually not as powerful and not as easy to set up. Cygwin is piss slow. Most of the non-Visual Studio text editors suck. The command line sucks, and &lt;a href=&quot;http://litanyagainstfear.com/blog/2008/03/20/pimping-the-windows-command-line/&quot;&gt;I tried really hard to make it not suck&lt;/a&gt;. &lt;a href=&quot;http://blog.mmediasys.com/2008/03/06/is-windows-a-supported-platform-for-ruby-i-guess-not/&quot;&gt; Even Ruby is slower&lt;/a&gt;! All of this pain goes away on &lt;span class=&quot;caps&quot;&gt;OSX&lt;/span&gt;/Ubuntu. Rails would be a lot different if it started on Windows, and I wonder if it would really be the same platform. For now though, I&amp;#8217;m loving the productivity boost that I&amp;#8217;m experencing and trying out different operating systems, and it serves my needs well.&lt;/p&gt;
&lt;h3&gt;Bleak future of .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; development.&lt;/h3&gt;
&lt;p&gt;This one will probably get me flamed the most. It&amp;#8217;s not that I don&amp;#8217;t like .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, it&amp;#8217;s just that I couldn&amp;#8217;t see myself using it any more professionally. I&amp;#8217;m really not a fan of VB.&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;, especially compared to Ruby. It&amp;#8217;s a cruft filled language that &lt;a href=&quot;http://www.panopticoncentral.net/archive/2007/11/14/22589.aspx&quot;&gt;makes me feel like Mort when writing it.&lt;/a&gt; Great things are possible with the language, but the result is so unreadable and ugly that I don&amp;#8217;t feel it&amp;#8217;s worth it anymore to use, especially if I can choose not to. C# on the other hand I love and always will, especially over Java.&lt;/p&gt;
&lt;p&gt;What scares me more about .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; is where&amp;#8217;s it&amp;#8217;s going: Silverlight and &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt;. &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; is supposed to be an awesome new platform that makes it easier for both programmers and designers to collaborate and create great applications.&lt;strong&gt; Seriously though, where are the great &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; applications? &lt;/strong&gt;Why haven&amp;#8217;t we heard as much about them, as say, the newest iPhone apps? I could say the same for Silverlight. Oh wait, the Olympics. ooh, Yahoo Messenger! Whatever. Nothing is going to kill Flash&amp;#8217;s market share.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure that things have changed since I was heavy into (bleeding edge) .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; development 6-9 months ago, but still there seems to be no killer app for &lt;span class=&quot;caps&quot;&gt;WPF&lt;/span&gt; or Silverlight yet. Until that happens they&amp;#8217;ll just suck like everything else. I&amp;#8217;d love to be proven wrong on this point, so if you know of one please show me.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve switched away from Windows or even if you&amp;#8217;ve become a Rubyist/Pythonista in recent times, let me know what your experiences have been. For now on my blog posts will hopefully be a bit more frequent, and will chronicle various quirks and fun things I&amp;#8217;ve found during my Rails journeys.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting baselined</title>
   <link href="http://tom.preston-werner.com/stories/2007/08/11/getting-baselined.html"/>
   <updated>2007-08-11T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/stories/2007/08/11/getting-baselined</id>
   <content type="html">&lt;p&gt;Yes! I did it, it took a few hours but finally the old layout has been updated with a baseline (and partly a grid). It looks a lot better. &lt;a href=&quot;/images/old.jpg&quot;&gt;Image of previous style and layout&lt;/a&gt;.  Main difficulty was to realize that the &lt;em&gt;em&lt;/em&gt; is a relative unit depending on whatever base font size you set &lt;strong&gt;in an absolute unit&lt;/strong&gt;. (&lt;em&gt;_&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Time for some linkage:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://24ways.org/2006/compose-to-a-vertical-rhythm&quot;&gt;Compose to a Vertical Rhythm by Richard Rutter&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.alistapart.com/articles/settingtypeontheweb&quot;&gt;Setting Type on the Web to a Baseline Grid
by Wilson Miner&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A long time ago, I read those tutorials. Today, I just woke up.  The inspiration came from a recent development: &lt;a href=&quot;http://code.google.com/p/blueprintcss/&quot;&gt;a CSS framework&lt;/a&gt;.  To experience the beauty of having a baseline try &lt;a href=&quot;http://robgoodlatte.com/2007/07/31/syncotype-your-baselines/&quot;&gt;syncotype&lt;/a&gt; and, for this site, set the line-height to 24px.   Syncotype rocks!&lt;/p&gt;

&lt;p&gt;I will be playing with the style these days as there are some minor areas that need attention like: list spacing, form controls spacing, color scheme ...and that header. (Â¬_Â¬)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Accessibility and why should I care</title>
   <link href="http://tom.preston-werner.com/links/2006/08/16/accessibility-and-why-should-i-care.html"/>
   <updated>2006-08-16T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/links/2006/08/16/accessibility-and-why-should-i-care</id>
   <content type="html">&lt;p&gt;I decided to make this site accessible.   &lt;a href=&quot;http://diveintoaccessibility.org/&quot;&gt;Wonderful resource&lt;/a&gt; for this matter.  In the beginning I said: &quot;I don't care if not everybody can read my website&quot;.  So selfish, and incomprehensive. You have to put yourself in the shoes of others to understand.  Of course, for most people it would be safer not to encounter this site. (&lt;sup&gt;_&lt;sup&gt;)&lt;/sup&gt;&lt;/sup&gt; But this is great as an exercise. I clearly see myself using accessibility in the near future. o.o&quot;&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.alistapart.com/stories/doctype/&quot;&gt;Doctype&lt;/a&gt;&lt;/h2&gt;


&lt;p&gt;WP uses XHTML 1.0 Transitional.
&lt;code&gt;
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;
&lt;/code&gt;
&lt;code&gt;
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot;   &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.loc.gov/standards/iso639-2/englangn.html&quot;&gt;Language&lt;/a&gt;&lt;/h2&gt;


&lt;p&gt;I mostly use english (en), and spanish (es).
&lt;code&gt;
For XHTML 1.0 Strict
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
For XHTML 1.1
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Meaningful page titles.&lt;/h2&gt;


&lt;p&gt;WP accomplishes this fine.&lt;/p&gt;

&lt;h2&gt;Providing additional navigation aids.&lt;/h2&gt;


&lt;p&gt;In WordPress this is implemented by a plugin.  From the ones listed at the &lt;a href=&quot;http://wordpress.org/support/topic/39661?replies=9&quot;&gt;WP forum&lt;/a&gt;, and the &lt;a href=&quot;http://trac.wordpress.org/ticket/1523&quot;&gt;trac ticket&lt;/a&gt;; the most appealing to me is &lt;a href=&quot;http://wordpress.org/support/topic/39661?replies=9&quot;&gt;META Relationship Links&lt;/a&gt;. You can &lt;a href=&quot;http://guff.szub.net/downloads/meta-relationship-links.zip&quot;&gt;dowload it&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Presenting your main content first.&lt;/h2&gt;


&lt;p&gt;Hehe, with CSS, this is truly easy!! And since my navigation div is using absolute positioning: no worries!&lt;/p&gt;

&lt;p&gt;To be continued...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Web Development Process</title>
   <link href="http://tom.preston-werner.com/community/2006/08/10/the-web-development-process.html"/>
   <updated>2006-08-10T00:00:00+04:00</updated>
   <id>http://tom.preston-werner.com/community/2006/08/10/the-web-development-process</id>
   <content type="html">&lt;p&gt;Without doubt, taking a website from zero to a successful one is yet another adventure in the experience catalog of a web developer.  The key for failure or success lies in the beginning of the project. The plan created to build a website, whether a redesign or from scratch, and the actions you take to implement it, are known as the &lt;em&gt;web development process&lt;/em&gt;  (from now on WDP).&lt;/p&gt;

&lt;p&gt;In turn, an excellent WDP is the combination of common sense and accurate creativity. Developing for the web is not rocket science, however, visionary creativity will be always in high demand.  Web development has technical aspects: either 0 or 1 (using a database or xml), and subjective like: information architecture, graphic design, usability, and a big ETC.!&lt;/p&gt;

&lt;p&gt;I want to mess with it. ^_^ &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Allright, after a moderated research about the WDP on the internet:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.happycog.com/contact/contact.zip&quot;&gt;happycog's project planner&lt;/a&gt; (2005).&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.gotomedia.com/resources.html&quot;&gt;gotomedia resources&lt;/a&gt; Specially Web Design Workflow. (2000)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://alistapart.com/articles/balloon&quot;&gt;The Problem, the Balloon, and the Four Bedroom House&lt;/a&gt; (2004)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://alistapart.com/articles/Process&quot;&gt;Process, Methodology, Life Cycle, Oh My!&lt;/a&gt; (2001)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://webdesignfromscratch.com/process.cfm&quot;&gt;Design process&lt;/a&gt; (?)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.macronimous.com/resources/web_development_life_cycle.asp&quot;&gt;Web Site Development Process - The life-cycle steps&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;If you graph the numbers of any system, patterns emerge&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An approach to understanding the WDP could be stating the different stages of it, and the activities or disciplines that are prominent at each phase.  But why just repeat the information gathered if we can go throught it with a real example, especially with not a stupid example, but a trascendental, life challenging, impressive project?&lt;/p&gt;

&lt;h2&gt;Zero: First contact&lt;/h2&gt;


&lt;p&gt;A client contacts you for a project. How to make that happen? Well, after developing a bunch of sites using an impeccable WDP, let's just say: cilents will come naturally.&lt;/p&gt;

&lt;h2&gt;First: Understand&lt;/h2&gt;




&lt;h2&gt;Second: Make a proposal official&lt;/h2&gt;




&lt;h2&gt;Third: Implement&lt;/h2&gt;




&lt;h2&gt;Fin&lt;/h2&gt;


&lt;p&gt;Summarizing: a WDP is like any process if we take this basic consideration: set a goal, decide how/when you are going to accomplish it, and make it happen.  Essentially, setting up objectives and then have a control mechanism to assess if they have been realized, is the way to measure progress. Progress is synonym of success, and success is good for your health.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>